{"version":3,"sources":["components/listUsers.js","components/listPosts.js","components/comments.js","App.js","serviceWorker.js","index.js"],"names":["ListUsers","props","state","users","axios","get","then","res","setState","data","className","this","map","el","src","name","to","id","Component","ListPosts","posts","params","match","title","body","Comment","comments","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAyDeA,E,YApDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAO,IAHI,E,iFAUE,IAAD,OAChBC,IAAMC,IAAI,8CACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVL,MAAOI,EAAIE,Y,+BAOvB,OACI,6BACI,wBAAIC,UAAU,aAAd,eACA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,qBACdC,KAAKT,MAAMC,MAAMS,KAAI,SAAAC,GAAE,OACrB,yBAAKH,UAAU,YACX,yBAAKA,UAAU,MAAOI,IAAI,4EACzB,yBAAKJ,UAAU,YAAW,2BAAKG,EAAGE,OAClC,kBAAC,IAAD,CAAMC,GAAE,iBAAaH,EAAGI,KAAxB,KAAgC,oDAAhC,KAEL,yC,GAjCCC,aCkDTC,E,YAlDX,WAAYlB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTkB,MAAO,IAHI,E,iFAOE,IAAD,OACCC,EAAaV,KAAKV,MAA3BqB,MAASD,OAEjBjB,IAAMC,IAAN,4DAA+DgB,EAAOJ,KACjEX,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVY,MAAOb,EAAIE,Y,+BAOvB,OAGQ,yBAAKC,UAAU,YACf,wBAAIA,UAAU,aAAd,cACKC,KAAKT,MAAMkB,MAAMR,KAAI,SAAAC,GAAE,OACpB,yBAAKH,UAAU,iBACX,6BACA,4BAAKG,EAAGE,MAER,sCAAYF,EAAGU,OACf,2CAAiBV,EAAGW,OAEpB,kBAAC,IAAD,CAAMR,GAAE,mBAAeH,EAAGI,KAA1B,KAAkC,mDAAlC,c,GAlCJC,aCmCTO,E,YAnCX,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEwB,SAAS,IAFT,E,iFAIE,IAAD,OACCL,EAAaV,KAAKV,MAA3BqB,MAASD,OACjBjB,IAAMC,IAAN,+DAAkEgB,EAAOJ,KACpEX,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVkB,SAAUnB,EAAIE,Y,+BAQ1B,OACI,yBAAKC,UAAU,eACf,wBAAIA,UAAU,aAAd,iBACKC,KAAKT,MAAMwB,SAASd,KAAI,SAAAC,GAAE,OACvB,8BAEI,4BAAKA,EAAGE,MACR,8BAAOF,EAAGW,e,GAzBZN,a,MCwBPS,MAjBf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKjB,UAAU,OAEf,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IAChC,kBAAC,IAAD,KAEA,kBAAC,IAAD,CAAS6B,KAAK,aAAaC,UAAWX,IACtC,kBAAC,IAAD,CAASU,KAAK,eAAeC,UAAWL,QCNzBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCZNa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.6234160d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\nimport {BrowserRouter,Route,Link} from 'react-router-dom'\r\nclass ListUsers extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            users: []\r\n        }\r\n\r\n      \r\n\r\n                    \r\n    }\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => {\r\n                this.setState({\r\n                    users: res.data,\r\n\r\n                })\r\n            })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className='listTitle'> LIST USERS</h1>\r\n                <div className='listUsers'>\r\n                    <div className='listUserContainer'>\r\n                    {this.state.users.map(el =>\r\n                       <div className='userCard'>\r\n                           <img className='img'  src='https://www.chardhamtour.in/wp-content/uploads/2019/03/user-default.png'  />\r\n                            <div className='userName'><p >{el.name}</p></div> \r\n                            <Link to ={`/posts/${el.id}`}>  <button> show the posts </button> </Link>\r\n                          \r\n                       <div>\r\n                    \r\n                       </div>\r\n                       \r\n                       </div>)}\r\n                       </div>\r\n                </div>\r\n\r\n\r\n                \r\n                    \r\n\r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ListUsers;","import React, { Component } from 'react';\r\nimport {BrowserRouter,Route,Link} from 'react-router-dom'\r\nimport axios from 'axios';\r\nclass ListPosts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts: []\r\n\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n\r\n        axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${params.id}`)\r\n            .then(res => {\r\n                this.setState({\r\n                    posts: res.data,\r\n\r\n                })\r\n            })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            \r\n                \r\n                <div className='listPost'>\r\n                <h1 className='listTitle' >List posts</h1>\r\n                    {this.state.posts.map(el =>\r\n                        <div className='postContainer'>\r\n                            <div>\r\n                            <h1>{el.name}</h1>\r\n\r\n                            <h1> title:{el.title}</h1>\r\n                            <span> comment: {el.body}</span>\r\n                            </div>\r\n                            <Link to ={`/comment/${el.id}`}>  <button> show comments </button> </Link>\r\n\r\n                            \r\n\r\n                        </div>)}\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default ListPosts;\r\n","import React,{Component} from 'react';\r\nimport axios from 'axios'\r\nclass Comment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { comments:[] }\r\n    }\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n        axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${params.id}`)\r\n            .then(res => {\r\n                this.setState({\r\n                    comments: res.data,\r\n\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className='listComment'>\r\n            <h1 className='listTitle' >List comments</h1>\r\n                {this.state.comments.map(el =>\r\n                    <span>\r\n\r\n                        <h1>{el.name}</h1>\r\n                        <span>{el.body}</span>\r\n                       \r\n\r\n                        \r\n\r\n                    </span>)}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Comment;","import React from 'react';\nimport {BrowserRouter,Route,Link,Switch} from 'react-router-dom'\nimport ListUsers from './components/listUsers'\nimport ListPosts from './components/listPosts'\nimport Comment from './components/comments'\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n    \n    <Route exact path='/' component={ListUsers}/>\n     <Switch>\n      \n     <Route   path='/posts/:id' component={ListPosts}/>\n     <Route   path='/comment/:id' component={Comment}/>\n\n     </Switch>\n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}